[{"/Users/teh__docco/Desktop/repos/roshrobotics/src/index.js":"1","/Users/teh__docco/Desktop/repos/roshrobotics/src/App.js":"2","/Users/teh__docco/Desktop/repos/roshrobotics/src/About.js":"3","/Users/teh__docco/Desktop/repos/roshrobotics/src/Home.js":"4","/Users/teh__docco/Desktop/repos/roshrobotics/src/slides/Terabot.js":"5","/Users/teh__docco/Desktop/repos/roshrobotics/src/slides/Sprinkler.js":"6","/Users/teh__docco/Desktop/repos/roshrobotics/src/slides/Chair.js":"7","/Users/teh__docco/Desktop/repos/roshrobotics/src/Contact.js":"8","/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/ForkLift.js":"9","/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/Sprinkler.js":"10","/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/Chair.js":"11","/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/Terabot.js":"12","/Users/teh__docco/Desktop/repos/roshrobotics/src/_constants/content.js":"13"},{"size":219,"mtime":1610114475479,"results":"14","hashOfConfig":"15"},{"size":3327,"mtime":1610849542698,"results":"16","hashOfConfig":"15"},{"size":548,"mtime":1614322695608,"results":"17","hashOfConfig":"15"},{"size":3145,"mtime":1610894448194,"results":"18","hashOfConfig":"15"},{"size":725,"mtime":1610150016587,"results":"19","hashOfConfig":"15"},{"size":699,"mtime":1610151735261,"results":"20","hashOfConfig":"15"},{"size":754,"mtime":1610151692032,"results":"21","hashOfConfig":"15"},{"size":3888,"mtime":1610893908843,"results":"22","hashOfConfig":"15"},{"size":1098,"mtime":1614322325998,"results":"23","hashOfConfig":"15"},{"size":492,"mtime":1614322327046,"results":"24","hashOfConfig":"15"},{"size":1340,"mtime":1614322348748,"results":"25","hashOfConfig":"15"},{"size":1513,"mtime":1614322328376,"results":"26","hashOfConfig":"15"},{"size":14113,"mtime":1614322554771,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"13pakic",{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/teh__docco/Desktop/repos/roshrobotics/src/index.js",[],["61","62"],"/Users/teh__docco/Desktop/repos/roshrobotics/src/App.js",["63","64","65"],"import './App.css';\nimport Home from './Home';\nimport About from './About';\nimport Contact from './Contact';\nimport Terabot from './bots/Terabot';\nimport ForkLift from './bots/ForkLift';\nimport Chair from './bots/Chair';\nimport Sprinkler from './bots/Sprinkler';\n\nimport {Menu, MenuItem, Typography, Link, Button} from '@material-ui/core';\nimport React from 'react';\n\nimport logo from './files/logo/logo_transparent.png';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n        anchorEl : false\n    }\n  }\n\n  handleClick = (event) => {\n    this.setState({anchorEl: event.currentTarget});\n  };\n\n  handleClose = () => {\n    this.setState({anchorEl: null});\n  };\n\n  render(){\n  \n   \n  return (\n    <div className=\"App\">\n      \n      <Router>\n      <div>\n      <div className=\"navbar\">\n      \n      <div style={{\"width\":\"40%\", \"float\":\"left\",\"margin-left\":\"5%\",\"text-align\":\"left\", \"text-decoration\": \"none\", 'margin-top':'5px'}}>\n        <Link style={{ textDecoration: 'none' }} href=\"/\"><Typography variant=\"h6\" style={{'margin-top':'5px'}}>\n            Roshans Robotics\n  </Typography>\n          </ Link>\n      </div>\n      \n        <div style={{\"width\":\"50%\", \"float\":\"right\"}} className=\"buttons\">\n          <a href=\"/Contact\"> Contact </a>\n          <a aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={this.handleClick}>\n            Robots\n          </a>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={this.state.anchorEl}\n            keepMounted\n            open={Boolean(this.state.anchorEl)}\n            onClose={this.handleClose}\n          \n          >\n          <Link style={{ textDecoration: 'none' }} href=\"/Terabot\"><MenuItem onClick={this.handleClose}>Terabot</MenuItem></Link>\n          <Link style={{ textDecoration: 'none' }} href=\"/Chair\"><MenuItem onClick={this.handleClose}>Chair</MenuItem></Link>\n          <Link style={{ textDecoration: 'none' }} href=\"/ForkLift\"><MenuItem onClick={this.handleClose}>Forklift</MenuItem></Link>\n          <Link style={{ textDecoration: 'none' }} href=\"/Sprinkler\"><MenuItem onClick={this.handleClose}>Sprinkler</MenuItem></Link>\n        </Menu>\n       \n        <a href=\"/about\">About</a>\n        <a href=\"/\">Home</a>\n        </div>\n        </div>\n      <hr />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/Terabot\">\n            <Terabot />\n          </Route>\n          <Route exact path=\"/ForkLift\">\n            <ForkLift />\n          </Route>\n          <Route exact path=\"/Sprinkler\">\n            <Sprinkler />\n          </Route>\n          <Route exact path=\"/Chair\">\n            <Chair />\n          </Route>\n          <Route exact path=\"/Contact\">\n            <Contact />\n          </Route>\n        </Switch>\n      </div>\n\n    </Router>\n    </div>\n  );\n }\n}\n\nexport default App;\n","/Users/teh__docco/Desktop/repos/roshrobotics/src/About.js",[],"/Users/teh__docco/Desktop/repos/roshrobotics/src/Home.js",["66","67"],"import React, { useState } from 'react';\nimport './Home.css';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore, { Navigation, Pagination, Controller, Thumbs } from 'swiper';\nimport 'swiper/swiper-bundle.css';\n\nimport Terabot from './slides/Terabot';\nimport Chair from './slides/Chair';\nimport Sprinkler from './slides/Sprinkler';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, TextField, Button} from '@material-ui/core';\n\nSwiperCore.use([Navigation, Pagination, Controller, Thumbs]);\n\nconst useStyles = makeStyles((theme) => ({\n  texfield: {\n    width: '30%',\n    borderColor: '#FFFFFFF'\n  },\n  input: {\n    color: 'white',\n    background: '#16384B',\n},\ncssLabel: {\n  color : 'white',\n},\n\n}));\n\nexport default function Home(){\n    const [thumbsSwiper, setThumbsSwiper] = useState(null);\n  const [controlledSwiper, setControlledSwiper] = useState(null);\n    const slides = [];\n    slides.push(\n    <SwiperSlide key={1} tag=\"p\">\n    <Terabot />\n    </SwiperSlide>);\n    slides.push(\n      <SwiperSlide key={3} tag=\"p\">\n      <Chair />\n      </SwiperSlide>);\n    slides.push(\n    <SwiperSlide key={2} tag=\"p\">\n    <Sprinkler />\n    </SwiperSlide>);\n    \n    const classes = useStyles();\n    \n    return(\n        <div>\n            <div className=\"parallax\" style={{'margin-top':'30px'}}>\n              <div className=\"myDiv\" style={{'padding-top':'10%','width':'50%','height':'50%','margin-left':'25%'}}>\n               \n              <Typography style={{'background-color':\"rgba(255,255,255,0.6)\",'opacity':'1', 'padding-top':'2%' , 'padding-bottom':'2%'}} variant=\"h5\">Usable Robots in Military, Agriculture and Daily Work</Typography>\n      \n              </div>\n               \n            </div>\n\n            <Swiper\n        id=\"main\"\n        thumbs={{ swiper: thumbsSwiper }}\n        controller={{ control: controlledSwiper }}\n        tag=\"section\"\n        wrapperTag=\"ul\"\n        navigation // check this\n        pagination //check this\n        spaceBetween={0}\n        slidesPerView={1}\n        loop={true} //Check this\n        autoplay={{delay:2, disableOnInteraction:true}} //check this\n        onInit={(swiper) => console.log('Swiper initialized!', swiper)}\n        onSlideChange={(swiper) => {\n          console.log('Slide index changed to: ', swiper.activeIndex);\n        }}\n        \n        \n      >\n        {slides}\n      </Swiper>\n      <div className=\"NewsLetter\">\n        <h4 style={{'margin-top':'2%'}}> Subscribe to the newsletter to recieve updates on the bots and on new research! </h4>\n          <form style={{'margin-top':'5%'}}>\n          <TextField id=\"standard-basic\" \n          label=\"Email\" \n          variant=\"outlined\" \n          className={classes.texfield}\n          InputProps={{\n            className: classes.input,\n        }}\n        InputLabelProps={{\n          classes: {\n            root: classes.cssLabel,\n          },\n        }}\n          />\n          <Button type=\"Submit\" value=\"Send\" color=\"secondary\" variant=\"contained\" style={{'height':'55px','width':'10%'}}> Send </Button>\n          \n          </form>\n        \n      </div>\n        </div>\n    );\n}","/Users/teh__docco/Desktop/repos/roshrobotics/src/slides/Terabot.js",["68"],"import terabot from '../files/Terabot.png';\nimport './Terabot.css';\n\nexport default function Terabot(){\n    return(\n        <div className=\"TerabotContainer\">\n            <h3>Terabot</h3>\n            <div className=\"Text\" >\n                <div className=\"Content\">\n                <p>\n                Material handling in industries to manouver over harsh terrain to perform varios tasks with specialised hand.\n                </p>\n                </div>\n            </div>\n            <div className=\"ImageContainer\">\n                <a href=\"/Terabot\">\n                <img src={terabot} style={{'width':'80%', 'height':'80%', 'border-radius': '10%'}}></img>\n                </a>\n            </div>\n        </div>\n    );\n}","/Users/teh__docco/Desktop/repos/roshrobotics/src/slides/Sprinkler.js",["69"],"import terabot from '../files/Sprinkler.png';\nimport './Sprinkler.css';\n\nexport default function Sprinkler(){\n    return(\n        <div className=\"SprinklerContainer\">\n            <h3>Sprinkler</h3>\n            <div className=\"SprinklerText\" >\n                <div className=\"Content\">\n                <p>\n                    The sprinkler also does something important in Agriculture.\n                 </p>\n                </div>\n            </div>\n            <div className=\"ImageContainer\">\n                <a href=\"/Terabot\">\n                <img src={terabot} style={{'width':'80%', 'height':'80%', 'border-radius': '10%'}}></img>\n                </a>\n            </div>\n        </div>\n    );\n}","/Users/teh__docco/Desktop/repos/roshrobotics/src/slides/Chair.js",["70"],"import terabot from '../files/Chair2.png';\nimport './Chair.css';\n\nexport default function Chair(){\n    return(\n        <div className=\"Container\">\n            <h3>Chair</h3>\n            <div className=\"ChairText\" >\n                <div className=\"Content\">\n                <p>\n                \n                    A specialised chair for excavators using hydraulics which will maintain the chair on horizontal position at various inclines. \n                </p>\n                </div>\n            </div>\n            <div className=\"ImageContainer\">\n                <a href=\"/Terabot\">\n                <img src={terabot} style={{'width':'80%', 'height':'80%', 'border-radius': '10%'}}></img>\n                </a>\n            </div>\n        </div>\n    );\n}","/Users/teh__docco/Desktop/repos/roshrobotics/src/Contact.js",["71","72"],"import React from 'react';\nimport axios from 'axios';\n\nimport { Button, TextField, CircularProgress, TextareaAutosize } from '@material-ui/core/';\n\nclass Contact extends React.Component{ \n    \n    constructor(props){\n        super(props)\n        this.state = {\n            fund_amount_check : false,\n            sent: false,\n            error: \"\",\n            isloading: false,\n            //form details\n            firstname : \"\", \n            lastname : \"\",\n            email : \"\",\n            phone : null,\n            message : \"\",\n            \n        }\n        this.generalChangeHandler = this.generalChangeHandler.bind(this);\n    }\n    \n    generalChangeHandler = (e) => {\n      this.setState({[e.target.name]:e.target.value})\n    }\n    \n    send = async () => {\n      console.log(\"posting\")\n      this.setState({isloading: true})\n      await axios.post('/send', {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        phone: this.state.phone,\n        message: this.state.InvestmentFund,\n       \n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response =>{\n        console.log(response.data)\n        if(response.data === 200 || response.data === \"200\"){\n          this.setState({sent:true, isloading:false})\n        }\n        else{\n          this.setState({error: <div><p>{response.data}<br />If the issue persists, contact me at abhinandan.srinivas@gmail.com </p></div>, isloading:false})\n        }\n      })\n      .catch(error => {\n        console.log(error)\n        this.setState({error:<div><p>Looks like there is an error, please try again after refreshing.<br /> If the issue persists, contact me at abhinandan.srinivas@gmail.com</p> </div>,isloading:false})\n      })\n    }\n  \n    render(){\n      const { firstname, lastname, message, email, phone } = this.state\n      const height = 30\n      \n      // Display form, if form is sent and is awaiting server response, display a loading animation.\n      const form_display = this.state.isloading ? <div style={{'margin':'25%'}}><CircularProgress color=\"primary\" /> </div>: (\n        <div>\n          <h3> Contact </h3>\n          {this.state.error}\n        <form>\n        <TextField required  label=\"First Name\" name = \"firstname\" value = {firstname} onChange={this.generalChangeHandler} /> <br />\n        <TextField required  label=\"Last Name\"name = \"lastname\" value={lastname} onChange={this.generalChangeHandler} /> <br /><br />\n       <TextField required  label=\"Email Address\" type=\"mail\" name = \"email\" value = {email}  onChange={this.generalChangeHandler} /><br /><br />\n        <TextField   label=\"Phone Number\" type=\"number\" name = \"phone\" value={phone} onChange={this.generalChangeHandler}  /><br /> <br /><br />\n        \n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Message\"\n          multiline\n          variant=\"outlined\"\n          required  \n          placeholder=\"message\" \n          type=\"text\" \n          name = \"message\" \n          rows={3} \n          value={message} \n          onChange={this.generalChangeHandler}\n        />\n         <br />\n        <br /><br />\n        </form>\n        <Button variant=\"contained\" color=\"secondary\"  onClick = {this.send.bind(this)} > Send </Button>\n        \n        </div>\n        )\n\n        // Once the server returns data, sent is true and user is given confirmation.\n        const render_return = this.state.sent ?\n        <div>\n          <h3> All Done! </h3>\n          <p> Your response is recorded. <br /> Please check the confirmation sent to your mail.<br /> Thank you! </p>\n        </div>\n        :\n        (\n          <div>\n                {form_display} \n            </div>\n        )\n\n        return(\n          <div style={{'margin-top':'50px'}}>\n          {render_return}  \n          </div>\n        );\n    }\n}\n\nexport default Contact;","/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/ForkLift.js",[],"/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/Sprinkler.js",[],"/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/Chair.js",[],"/Users/teh__docco/Desktop/repos/roshrobotics/src/bots/Terabot.js",["73","74","75","76"],"/Users/teh__docco/Desktop/repos/roshrobotics/src/_constants/content.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":10,"column":43,"nodeType":"83","messageId":"84","endLine":10,"endColumn":49},{"ruleId":"81","severity":1,"message":"85","line":13,"column":8,"nodeType":"83","messageId":"84","endLine":13,"endColumn":12},{"ruleId":"86","severity":1,"message":"87","line":56,"column":11,"nodeType":"88","endLine":56,"endColumn":90},{"ruleId":"81","severity":1,"message":"89","line":32,"column":26,"nodeType":"83","messageId":"84","endLine":32,"endColumn":41},{"ruleId":"81","severity":1,"message":"90","line":33,"column":28,"nodeType":"83","messageId":"84","endLine":33,"endColumn":47},{"ruleId":"91","severity":1,"message":"92","line":17,"column":17,"nodeType":"88","endLine":17,"endColumn":100},{"ruleId":"91","severity":1,"message":"92","line":17,"column":17,"nodeType":"88","endLine":17,"endColumn":100},{"ruleId":"91","severity":1,"message":"92","line":18,"column":17,"nodeType":"88","endLine":18,"endColumn":100},{"ruleId":"81","severity":1,"message":"93","line":4,"column":47,"nodeType":"83","messageId":"84","endLine":4,"endColumn":63},{"ruleId":"81","severity":1,"message":"94","line":60,"column":13,"nodeType":"83","messageId":"84","endLine":60,"endColumn":19},{"ruleId":"81","severity":1,"message":"95","line":1,"column":11,"nodeType":"83","messageId":"84","endLine":1,"endColumn":21},{"ruleId":"81","severity":1,"message":"96","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":17},{"ruleId":"81","severity":1,"message":"97","line":3,"column":8,"nodeType":"83","messageId":"84","endLine":3,"endColumn":15},{"ruleId":"81","severity":1,"message":"98","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":23},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setThumbsSwiper' is assigned a value but never used.","'setControlledSwiper' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'TextareaAutosize' is defined but never used.","'height' is assigned a value but never used.","'Typography' is defined but never used.","'terrabot1' is defined but never used.","'terabot' is defined but never used.","'ScrollAnimation' is defined but never used.","no-global-assign","no-unsafe-negation"]